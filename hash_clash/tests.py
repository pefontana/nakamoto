import unittest
import random
from hashlib import sha256
from main import is_valid, mint

class Testing(unittest.TestCase):
    def test_1(self):
      self.assertIsInstance(is_valid("1:210214:satoshin@gmx.com:32572a910499e4b8", "210214", "satoshin@gmx.com", 16), bool, "is_valid must return a boolean")

    def test_2(self):
      res = is_valid("1:210214:satoshin@gmx.com:32572a910499e4b8", "210214", "satoshin@gmx.com", 16)
      self.assertTrue(res, "Correctly validates a valid hashcash")

    def test_3(self):
      res = is_valid("1:210214:satoshin@gmx.com:32572a910499e4b8", "210214", "attacker@gmx.com", 16)
      self.assertFalse(res, "Correctly rejects a manipulated email")

    def test_4(self):
      res = is_valid("1:210214:satoshin@gmx.com:7e20bbffa3f1df5e", "210214", "satoshin@gmx.com", 16)
      self.assertFalse(res, "Correctly rejects insufficient difficulty")

########################################################
######################### Part 2 #######################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
##                                                    ##
## Don't peek past this point or you'll spoil part 1! ##
##                                                    ##
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################
########################################################

    @classmethod
    def setUpClass(self):
      HASHCASH_TEMPLATE = '1:{}:{}:'

      def sha2(preimage):
          return sha256(preimage.encode()).hexdigest()

      def binary_leading_0s(hex_str: str):
          binary_representation = bin(int(hex_str, 16))[2:].zfill(256)
          return len(binary_representation) - len(binary_representation.lstrip('0'))

      def _is_valid(self, token: str, date: str, email: str, difficulty: int) -> bool:
          prefix = HASHCASH_TEMPLATE.format(date, email)
          nonce = token[len(prefix):]

          if len(date) > 6:
              return False
          elif not token.startswith(prefix):
              return False
          elif ':' in nonce:
              return False
          elif len(nonce) > 16:
              return False
          return binary_leading_0s(sha2(token)) >= difficulty
      
      self.is_valid = _is_valid
  
    def test_5(self):
      date = random.randint(200101, 200131)
      token = mint(str(date), "nakamoto@nakamoto.com", 15)
      self.assertTrue(self.is_valid(token, str(date), "nakamoto@nakamoto.com", 15), "mint can mint a valid Hashcash")

    def test_6(self):
      date = random.randint(200101, 200131)
      token = mint(str(date), "tryagain@nakamoto.com", 15)
      self.assertTrue(self.is_valid(token, str(date), "tryagain@nakamoto.com", 15), "can do it twice!")

if __name__ == '__main__':
    unittest.main(failfast=True)